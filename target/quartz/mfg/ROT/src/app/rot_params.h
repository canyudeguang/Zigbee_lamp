/*
 * Copyright (c) 2017 Qualcomm Technologies, Inc.
 * All Rights Reserved.
 */
// Copyright (c) 2018 Qualcomm Technologies, Inc.
// All rights reserved.
// Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) 
// provided that the following conditions are met:
// Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
// Redistributions in binary form must reproduce the above copyright notice, 
// this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
// Neither the name of Qualcomm Technologies, Inc. nor the names of its contributors may be used to endorse or promote products derived 
// from this software without specific prior written permission.
// NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
// BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
// IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, 
// OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
// EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef _ROT_PARAM_H
#define _ROT_PARAM_H

/*This tool allows a user to activate or revoke a root certificate in QCA402X.
  The tool uses KDF APIs to modify Multiple-Root-of-Trust fuses. A PC based
  KDF password generator tool is used to generate the password that unlocks
  the KDF module in the HW. Please refer to QCA402X Security Guide for more 
  details.
*/  

#define ROT_STATUS_SUCCESS               0
#define ROT_STATUS_ERR_PASSWORD_MISMATCH 1
#define ROT_STATUS_ERR_WRITE_FAIL        2
#define ROT_STATUS_ERR_READ_FAIL         3
#define ROT_STATUS_KDF_FAIL              4 


/*This API will read and return the Root of trust vector fuse value in OTP*/
uint32_t get_ROT(uint8_t* rot_vector);

/*This API will update the ROT bits in OTP using KDF operations*/
uint32_t update_ROT(uint8_t* activate_input, uint8_t* revoc_input, uint64_t activate_password, uint64_t revoc_password);


/********************************************************************/
/* CAUTION!!!  The parameters below must be populated based on the out 
   of the KDF password generator tool. An incorrect parameter will lead
   to KDF operation failure.
*/

/****************** ACTIVATION PARAMETERS ****************************/

/*ROT activation password generated by KDF password tool*/   
#define ROT_ACTIVATION_PASSWORD (0x79702BF91CD0E937)


/* Activation Input: 16 bytes. This value should match the 
   sw input parameter provided to kdf password generator for
   opcode 7.
   The lower nibble of the first byte encodes the ROT 
   activation vector value. Each bit corresponds to one Root Certificate. 
   Setting a bit activate the corresponding Root Certificate    */
static uint8_t activate_input[]   = {0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00,  0x00, 0x00, 0x00};

/****************** REVOCATION PARAMETERS ****************************/
/*ROT revocation password generated by KDF password tool*/
#define ROT_REVOCATION_PASSWORD (0x4D3FC6BE49D3AC87)

/* Revocation Input: 16 bytes. This value should match the 
   sw input parameter provided to kdf password generator for
   opcode 8.
   The lower nibble of the first byte encodes the ROT 
   revocation vector value. Each bit corresponds to one 
   Root Certificate. Setting a bit revoke the corresponding Root Certificate */
static uint8_t revoc_input[]      = {0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

/*********************************************************************/
#endif

