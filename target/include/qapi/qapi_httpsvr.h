/*
 * Copyright (c) 2016-2018 Qualcomm Technologies, Inc.
 * All Rights Reserved.
 */
// Copyright (c) 2018 Qualcomm Technologies, Inc.
// All rights reserved.
// Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) 
// provided that the following conditions are met:
// Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
// Redistributions in binary form must reproduce the above copyright notice, 
// this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
// Neither the name of Qualcomm Technologies, Inc. nor the names of its contributors may be used to endorse or promote products derived 
// from this software without specific prior written permission.
// NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
// BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
// IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, 
// OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
// EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/**
 * @file qapi_httpsvr.h
 *
 * @addtogroup qapi_networking_httpsvr
 * @{
 *
 * @details The HTTP Server service provides a collection of API functions that
 * allow the application to enable and configure HTTP server services.
 * The HTTP server can be configured to support IPv4, IPv6, or both, as well as
 * HTTP mode, HTTPS mode (secure), or both.
 * The Web server implementation allows customers' CGI code to be executed.
 *
 * @}
 */

#ifndef _QAPI_HTTPSVR_H_
#define _QAPI_HTTPSVR_H_

#include <stdint.h>
#include "qapi/qapi_status.h"   /* qapi_Status_t */
#include "qapi_ssl.h"

/** @addtogroup qapi_networking_httpsvr
@{ */

/*
 * HTTP modes that the HTTP server can support (HTTP, HTTPS, or both).
 */
typedef enum
{
    QAPI_NET_HTTPSVR_HTTP_E = 1,
    /**< Only nonsecure HTTP. */

    QAPI_NET_HTTPSVR_HTTPS_E = 2,
    /**< Only HTTPS. */

    QAPI_NET_HTTPSVR_HTTP_AND_HTTPS_E = 3
    /**< Both HTTP and HTTPS. */

} qapi_Net_HTTPs_Mode_t;


#define QAPI_NET_HTTPSVR_PATHMAX    31
#define QAPI_NET_HTTPSVR_SVRNAMEMAX 63
/**
 * @brief For use with qapi_Net_HTTPs_Init() to configure the HTTP server.
 */
typedef struct qapi_Net_HTTPs_Config_s
{
    char interface_Name[8];
    /**< Network interface to bind, e.g., wlan1.
         If not specified, the server will bind to every network interface. */

    qapi_Net_HTTPs_Mode_t mode;
    /**< Supports (nonsecure) HTTP only, HTTPS only, or both. */

    uint16_t http_Port;
    /**< Listening port of the HTTP server. If 0, the server will listen on port 80. */

    uint16_t https_Port;
    /**< Listening port of the HTTPS server. If 0, the server will listen on port 443. */

    char root_Index_Page[ QAPI_NET_HTTPSVR_PATHMAX ];
    /**< Landing page if abs_path of URI is empty, or '/'.
         If not specified, the default page is index.iws. */

    char root_Path[ QAPI_NET_HTTPSVR_PATHMAX ];
    /**< Root directory of the local file system where all web pages are located.
         If not specified, the default path is /web/. */

    char cert_File[ QAPI_NET_HTTPSVR_PATHMAX ];
    /**< Server's certificate name, e.g., ca.cert.bin. */

    uint8_t family;
    /**< Run in IPv4 only (AF_INET), IPv6 only (AF_INET6), or both (AF_INET_DUAL46). */

    char *server_Name;
    /**< Value in the server response header field.
         If NULL, the default is Qualcomm Technologies WebServer 1.0. */

    void (*webfiles_Setup)(void);
    /**< User function to set up WEB pages stored in the Virtual File System (VFS).
         If the VFS is used, this function can be generated by the VFS compiler.
         If the VFS is not used, this field should be set to NULL. */

    uint16_t rxbufsize;
    /**< Size in bytes of the receive buffer, if allocated. If 0, the server will use default size = 1024. */

    uint16_t txbufsize;
    /**< Size in bytes of the transmit buffer, if allocated. If 0, the server will use default size = 2048. @newpagetable */

} qapi_Net_HTTPs_Config_t, qapi_Net_HTTPs_Status_t;

/**
 * @brief Tests whether the HTTP server is started.
 *
 * @return
 * 0 if not started; 1 if started.
 */
qapi_Status_t qapi_Net_HTTPs_Is_Started(void);

/**
 * @brief Creates an HTTP server.
 *
 * @param[in] cfg   Pointer to configuration parameters: 
 *                  - Parameters mode and family are required.
 *                  - If mode is QAPI_NET_HTTPSVR_HTTPS_E or QAPI_NET_HTTPSVR_HTTP_AND_HTTPS_E,
 *                     cert_file is also required.
 *                  - If http_port is zero, the server will listen on port 80 for HTTP.
 *                  - If https_port is zero, the server will listen on port 443 for HTTPS.
 *                  - If the server cannot find an interface with the name ifname, it will
 *                     receive HTTP requests from any of its interfaces.
 *                  - The default root_index_page is index.iws.
 *                  - The default root_path is /web/.
 *                  - If 'server_name' is NULL, the server response header will contain "Qualcomm Technologies WebServer 1.0".
 *                     'server_name' will be truncated if its length is greater than QAPI_NET_HTTPSVR_SVRNAMEMAX.
 *
 *
 * @return
 * On success, 0 is returned; on error, -1 is returned.
 */
qapi_Status_t qapi_Net_HTTPs_Init(qapi_Net_HTTPs_Config_t *cfg);

/**
 * @brief Shuts down the HTTP server.
 *
 * @details Normally, this is called to shut down the server after it was
 *          created via a call to qapi_Net_HTTPs_Init().
 *
 * @return  QAPI_OK.  
 */
qapi_Status_t qapi_Net_HTTPs_Shutdown(void);

/**
 * @brief Configures an SSL connection.
 *
 * @details If the configuration is intended, this API must be called after
 *          the server is created via qapi_Net_HTTPs_Init() and before
 *          the server is started via qapi_Net_HTTPs_Start().
 *
 * @param[in] cfg   Pointer to a block of SSL configuration parameters.
 *
 * @return On success, 0 is returned. On error, -1 is returned.
 */
qapi_Status_t qapi_Net_HTTPs_Set_SSL_Config(qapi_Net_SSL_Config_t *cfg);

/**
 * @brief (Re)starts an HTTP server.
 *
 * @details Normally, this is called to restart the server after it was
 *          stopped via a call to qapi_Net_HTTPs_Stop().
 *
 * @return
 * On success, 0 is returned; on error, -1 is returned.
 */
qapi_Status_t qapi_Net_HTTPs_Start(void);

/**
 * @brief Stops an HTTP server.
 *
 * @details The server will not accept connect requests from clients.
 *
 * @return
 * On success, 0 is returned; on error, -1 is returned.
 */
qapi_Status_t qapi_Net_HTTPs_Stop(void);

/**
 * @brief Gets the HTTP server status.
 *
 * @details Normally, if the call returns -1, it indicates that the server
 *          has not been initialized. Call qapi_Net_HTTPs_Init() to
 *          create the server.
 *
 * @param[in] status    Buffer to contain the server status.
 *
 * @return
 * On success, 0 is returned; on error, -1 is returned.
 */
qapi_Status_t qapi_Net_HTTPs_Get_Status(qapi_Net_HTTPs_Status_t *status);

/**
 * @brief Registers a content type.
 *
 * @details For a POST/PUT request, the server assumes the content type is
 *          application/x-www-form-urlencoded and parses the message body
 *          into name/value pairs. An application may have its own content type
 *          and must handle the message body by itself. In such a case, the application
 *          must call this API to register its content type and call
 *          qapi_Net_Webs_Get_Message_Body() to get the message body.
 *
 * @param[in] type_string   Content type string to be registered, e.g., application/mydemo.    
 * @param[in] n             Size of type_string in bytes.
 *
 * @return
 * On success, 0 is returned; on error, -1 is returned.
 */
qapi_Status_t qapi_Net_HTTPs_Register_Content_Type(const char *type_string, uint32_t n);

/**
 * @brief Unregisters a content type.
 *
 * @param[in] type_string   Content type string to be unregistered, e.g., application/mydemo.    
 * @param[in] n             Size of type_string in bytes.
 *
 * @return
 * On success, 0 is returned; on error, -1 is returned.
 */
qapi_Status_t qapi_Net_HTTPs_Unregister_Content_Type(const char *type_string, uint32_t n);

/**
 * @brief Sets the size of the Tx and Rx buffers.
 *
 * @note1hang    The server caps the size in the range 512 to 16348. 
 *
 * @param[in] txbufsize   Size of the Tx buffer in bytes.
 *                        If 0, the server uses the default size of 2048.
 *                          
 * @param[in] rxbufsize   Size of the Rx buffer in bytes.
 *                        If 0, the server uses the default size of 1024.
 *
 * @return
 * On success, 0 is returned; on error, -1 is returned.
 */
qapi_Status_t qapi_Net_HTTPs_Set_Buffer_Size(uint16_t txbufsize, uint16_t rxbufsize);


/** @} */ /* end_addtogroup qapi_httpsvr */

#endif /* _QAPI_HTTPSVR_H_ */
