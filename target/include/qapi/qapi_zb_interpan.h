/*
 * Copyright (c) 2016-2018 Qualcomm Technologies, Inc.
 * All Rights Reserved.
 */
// Copyright (c) 2018 Qualcomm Technologies, Inc.
// All rights reserved.
// Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) 
// provided that the following conditions are met:
// Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
// Redistributions in binary form must reproduce the above copyright notice, 
// this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
// Neither the name of Qualcomm Technologies, Inc. nor the names of its contributors may be used to endorse or promote products derived 
// from this software without specific prior written permission.
// NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
// BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
// IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, 
// OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
// EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/** @file qapi_zb_interpan.h
   @brief QAPI for the ZigBee Inter-PAN communication.

   @addtogroup qapi_zb_interpan
   @{

   This API provides definitions, commands, and events related to ZigBee
   inter-PAN communication (communication between two separate ZigBee networks).

   An inter-PAN callback function should be registered before using the other
   APIs in this header.  This callback will notify the application when packets
   have been sent successfully or received from an inter-PAN device.

   @}
*/

#ifndef  __QAPI_ZB_INTERPAN_H__ // [
#define  __QAPI_ZB_INTERPAN_H__

/*-------------------------------------------------------------------------
 * Include Files
 *-----------------------------------------------------------------------*/

#include "qapi/qapi_types.h"
#include "qapi/qapi_status.h"
#include "qapi_zb.h"

/** @addtogroup qapi_zb_interpan
@{ */

/*-------------------------------------------------------------------------
 * Preprocessor Definitions and Constants
 *-----------------------------------------------------------------------*/

/*-------------------------------------------------------------------------
 * Type Declarations
 *-----------------------------------------------------------------------*/

/**
   Enumeration of the event types that can be generated by the inter-PAN
   module.
*/
typedef enum
{
   QAPI_ZB_INTERPAN_EVENT_TYPE_DATA_INDICATION_E, /**< Indicates that an inter-PAN packet was received. */
   QAPI_ZB_INTERPAN_EVENT_TYPE_DATA_CONFIRM_E     /**< Indicates that an inter-PAN packet transmission has completed. */
} qapi_ZB_InterPAN_Event_Type_t;

/**
   This structure represents the parameters for a INTRP-DATA.request primitive.
*/
typedef struct qapi_ZB_InterPAN_Data_Request_s
{
   /** Address mode for the source address. */
   qapi_ZB_Addr_Mode_t  SrcAddrMode;

   /** Address mode for the destination address. */
   qapi_ZB_Addr_Mode_t  DstAddrMode;

   /** Destination PAN ID. */
   uint16_t             DstPanId;

   /** Destination address for the frame. */
   qapi_ZB_Addr_t       DstAddress;

   /** Profile ID for the frame. */
   uint16_t             ProfileId;

   /** Cluster ID for the frame. */
   uint16_t             ClusterId;

   /** Length of the frame's payload. */
   uint8_t              ASDULength;

   /** Payload of the frame. */
   uint8_t             *ASDU;

   /** Handle of the ASDU frame. */
   uint8_t              ASDUHandle;

   /** Transmission options for the packet as defined by
       QAPI_ZB_APSDE_DATA_REQUEST_TX_OPTION_*.  Note that only the secure and
       acknowledged transmission flags are valid for this data request. */
   uint8_t              TxOption;
} qapi_ZB_InterPAN_Data_Request_t;

/**
   Structure that represents the parameters for an INTRP-DATA.confirm primitive.
*/
typedef struct qapi_ZB_InterPAN_Data_Confirm_s
{
   /** Handle of the frame that was transmitted. */
   uint8_t       ASDUHandle;

   /** Status result of the data request. */
   qapi_Status_t Status;
} qapi_ZB_InterPAN_Data_Confirm_t;

/**
   Structure that represents the parameters for an INTRP-DATA.indication
   primitive.
*/
typedef struct qapi_ZB_InterPAN_Data_Indication_s
{
   /** Address mode of the source address. */
   qapi_ZB_Addr_Mode_t  SrcAddrMode;

   /** Source PAN ID. */
   uint16_t             SrcPanId;

   /** Source address of the frame. */
   qapi_ZB_Addr_t       SrcAddr;

   /** Address mode of the destination address. */
   qapi_ZB_Addr_Mode_t  DstAddrMode;

   /** Destination PAN ID. */
   uint16_t             DstPanId;

   /** Destination address of the frame. */
   qapi_ZB_Addr_t       DstAddr;

   /** Profile ID of the frame. */
   uint16_t             ProfileId;

   /** Cluster ID of the frame. */
   uint16_t             ClusterId;

   /** Length of the frame's payload. */
   uint8_t              ASDULength;

   /** Payload of the frame. */
   uint8_t             *ASDU;

   /** Status result of the incoming frame processing. */
   qapi_Status_t        Status;

   /** Status indicating the frame's encryption (i.e., which key was used). */
   qapi_Status_t        SecurityStatus;

   /** Link quality of the received frame. */
   uint8_t              LinkQuality;
} qapi_ZB_InterPAN_Data_Indication_t;

/**
   Structure representing the data for an event from the ZigBee inter-PAN layer.
*/
typedef struct qapi_ZB_InterPAN_Event_s
{
   /** Type of event represented by this structure. This also determines which
       member of the data union is valid. */
   qapi_ZB_InterPAN_Event_Type_t Event_Type;

   /** Data for the event.  The actual structure used is determined by the
       Event_Type member. */
   union
   {
      /** Information for an INTERP-DATA.indication event. */
      qapi_ZB_InterPAN_Data_Indication_t Data_Indication;

      /** Information for an INTERP-DATA.confirm event. */
      qapi_ZB_InterPAN_Data_Confirm_t    Data_Confirm;
   } Data;
} qapi_ZB_InterPAN_Event_t;

/**
   @brief Function definition that represents a callback function that handles
          events from the ZigBee inter-PAN layer of the ZigBee stack.

   @param ZB_Handle           Handle of the ZigBee instance.
   @param InterPAN_Event_Data Structure pointer containing event information.
   @param CB_Param            User-specified parameter for the callback
                              function.
*/
typedef void (*qapi_ZB_InterPAN_Event_CB_t)(qapi_ZB_Handle_t ZB_Handle, const qapi_ZB_InterPAN_Event_t *InterPAN_Event_Data, uint32_t CB_Param);

/*-------------------------------------------------------------------------
 * Function Declarations and Documentation
 *-----------------------------------------------------------------------*/

/**
   @brief Registers an inter-PAN event callback.

   @param[in] ZB_Handle         Handle of the ZigBee instance.
   @param[in] InterPAN_Event_CB Callback function that will handle ZigBee
                                inter-PAN events.
   @param[in] CB_Param          User-specified parameter for the callback
                                function.

   @return
     - QAPI_OK if the command executed successfully.
     - A negative value if there was an error.
*/
qapi_Status_t qapi_ZB_InterPAN_Register_Callback(qapi_ZB_Handle_t ZB_Handle,  const qapi_ZB_InterPAN_Event_CB_t InterPAN_Event_CB, uint32_t CB_Param);

/**
   @brief Unregisters an inter-PAN event callback.

   @param[in] ZB_Handle         Handle of the ZigBee instance.
   @param[in] InterPAN_Event_CB Callback function to unregister.

   @return
     - QAPI_OK if the request executed successfully.
     - A negative value if there was an error.
*/
qapi_Status_t qapi_ZB_InterPAN_Unregister_Callback(qapi_ZB_Handle_t ZB_Handle, const qapi_ZB_InterPAN_Event_CB_t InterPAN_Event_CB);

/**
   @brief Implements the ZigBee INTERP-DATA.request primitive.

   @param[in] ZB_Handle    Handle of the ZigBee instance.
   @param[in] Data_Request Structure containing information for the request.

   @return
     - QAPI_OK if the request executed successfully.
     - A negative value if there was an error.
*/
qapi_Status_t qapi_ZB_InterPAN_Data_Request(qapi_ZB_Handle_t ZB_Handle, const qapi_ZB_InterPAN_Data_Request_t *Data_Request);

#endif // ] #ifndef __QAPI_ZB_INTERPAN_H__

/** @} */

