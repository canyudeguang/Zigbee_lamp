/*
 * Copyright (c) 2016-2018 Qualcomm Technologies, Inc.
 * All Rights Reserved.
 */
// Copyright (c) 2018 Qualcomm Technologies, Inc.
// All rights reserved.
// Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) 
// provided that the following conditions are met:
// Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
// Redistributions in binary form must reproduce the above copyright notice, 
// this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
// Neither the name of Qualcomm Technologies, Inc. nor the names of its contributors may be used to endorse or promote products derived 
// from this software without specific prior written permission.
// NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
// BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
// IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, 
// OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
// EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/** @file qapi_zb_zgp.h
   @brief QAPI for ZigBee Green Power (ZGP).

   @addtogroup qapi_zb_zgp
   @{

   This API provides definitions, commands, and events related to the ZigBee
   Green Power operation. These commands and events are not required for a
   typical application but are provided for debugging, certification, and other
   advanced functionality.

   @}
*/
#ifndef __QAPI_ZB_ZGP_H__
#define __QAPI_ZB_ZGP_H__

/*-------------------------------------------------------------------------
 * Include Files
 *-----------------------------------------------------------------------*/

#include "qapi/qapi_types.h"
#include "qapi/qapi_status.h"
#include "qapi_zb.h"

/** @addtogroup qapi_zb_zgp
@{ */

/**
   Enumeration of the key types used by ZigBee Green Power.
*/
typedef enum
{
   QAPI_ZB_ZGP_SECURITY_KEY_TYPE_NO_KEY                       = 0x00, /**< No key. */
   QAPI_ZB_ZGP_SECURITY_KEY_TYPE_NWK_KEY                      = 0x01, /**< Standard NWK key. */
   QAPI_ZB_ZGP_SECURITY_KEY_TYPE_GP_GROUP_KEY                 = 0x02, /**< Green Power group key. */
   QAPI_ZB_ZGP_SECURITY_KEY_TYPE_NWK_KEY_DERIVED_GP_GROUP_KEY = 0x03, /**< NWK-key derived Green Power group key. */
   QAPI_ZB_ZGP_SECURITY_KEY_TYPE_DERIVED_INDIVIDUAL_GPD_KEY   = 0x07  /**< Derived individual GPD key. */
} qapi_ZB_ZGP_Security_Key_t;

/**
   Enumeration of the event types that may be generated by ZigBee Green Power.
*/
typedef enum
{
   QAPI_ZB_ZGP_EVENT_TYPE_GP_DATA_CONFIRM_E        /**< Indicates Green Power data confirm event. */
} qapi_ZB_ZGP_Event_Type_t;

/**
   Structure representing the Green Power data request.
*/
typedef struct qapi_ZB_ZGP_GP_Data_Request_s
{
   /** Transmission options for GPDF. */
   uint8_t   TxOptions;

   /** Application ID of the GPD to which the ASDU will be sent.*/
   uint8_t   ApplicationId;

   /** Identifier of the GPD entity to which the ASDU will be sent if the
       application ID is zero. */
   uint32_t  SrcId;

  /** Identifier of the GPD entity to which the ASDU will be sent if the
       application ID is two. */
   uint64_t  GPDIEEEAddr;

   /** Identifier of the GPD endpoint used in combination with the GPD IEEE
       address if the application ID is two.  This parameter is ignored if the
       application ID is zero. */
   uint8_t   Endpoint;

   /** Identifier of the command, within the GP specification, that defines the
       application semantics of the ASDU. */
   uint8_t   GPDCommandId;

   /** Length, in bytes, of the GPD ASDU. */
   uint8_t   GPDASDULength;

   /** GPD ASDU. */
   uint8_t  *GPDASDU;

   /** Handle used between the Green Power EndPoint and the dGP stub, to match
       the request with the confirmation.*/
   uint32_t  GPEPHandle;

   /** Lifetime of this packet in the gpTxQueue, in milliseconds. */
   uint32_t  gpTxQueueEntryLifeTime;
} qapi_ZB_ZGP_GP_Data_Request_t;

/**
   Structure representing the Green Power data confirm event.
*/
typedef struct qapi_ZB_ZGP_Data_Confirm_s
{
   /** Status for ZGP data request operation. */
   qapi_Status_t Status;

   /** Handle used between the Green Power EndPoint and the dGP stub, to match
       the request with the confirmation.*/
   uint32_t      GPEPHandle;
} qapi_ZB_ZGP_Data_Confirm_t;

/**
   Structure representing the ZGP add key request.
*/
typedef struct qapi_ZB_ZGP_Key_Request_s
{
   /** Application ID associated with this key. */
   uint8_t                     ApplicationId;
   /** GPD ID associated with this key. */
   uint64_t                    GPDId;
   /** Endpoint to match against incoming frames. */
   uint8_t                     EndPoint;
   /** Security level to match against incoming frames. */
   uint8_t                     SecurityLevel;
   /** ZGP key type. */
   qapi_ZB_ZGP_Security_Key_t  KeyType;
   /** Buffer containing the key bytes. */
   uint8_t                    *Key;
} qapi_ZB_ZGP_Key_Request_t;

/**
   Structure representing the data for an event from the Green Power layer.
*/
typedef struct qapi_ZB_ZGP_Event_s
{
   /** Type of event represented by this structure. This also determines which
       member of the Data union is valid. */
   qapi_ZB_ZGP_Event_Type_t      Event_Type;

   /** Data for the event.  The actual structure used is determined by the
       Event_Type member. */
   union
   {
      /** Information for an APSDE-DATA.confirm event. */
      qapi_ZB_ZGP_Data_Confirm_t GP_Data_Confirm;
   } Data;
} qapi_ZB_ZGP_Event_t;

/**
   @brief Represents a callback function that handles
          events from the Green Power layer.

   Most applications would not need to hook this callback.

   @param ZB_Handle      Handle of the ZigBee instance.
   @param ZGP_Event_Data Structure pointer containing information for the event.
   @param CB_Param       User-specified parameter for the callback function.
*/
typedef void (*qapi_ZB_ZGP_Event_CB_t)(qapi_ZB_Handle_t ZB_Handle, const qapi_ZB_ZGP_Event_t *ZGP_Event_Data, uint32_t CB_Param);

/**
   @brief Registers a ZigBee Green Power event callback.

   @param[in] ZB_Handle    Handle of the ZigBee instance.
   @param[in] ZGP_Event_CB ZigBee Green Power event callback function.
   @param[in] CB_Param     User-specified parameter for the callback function.

   @return
     - QAPI_OK if the command executed successfully.
     - A negative value if there was an error.
*/
qapi_Status_t qapi_ZB_ZGP_Register_Callback(qapi_ZB_Handle_t ZB_Handle,  const qapi_ZB_ZGP_Event_CB_t ZGP_Event_CB, uint32_t CB_Param);

/**
   @brief Unregisters a ZigBee Green Power event callback.

   @param[in] ZB_Handle    Handle of the ZigBee instance.
   @param[in] ZGP_Event_CB ZigBee Green Power callback function to unregister.

   @return
     - QAPI_OK if the request executed successfully.
     - A negative value if there was an error.
*/
qapi_Status_t qapi_ZB_ZGP_Unregister_Callback(qapi_ZB_Handle_t ZB_Handle, const qapi_ZB_ZGP_Event_CB_t ZGP_Event_CB);

/**
   @brief Implements the ZigBee Green Power data reqeust.

   @param[in] ZB_Handle    Handle of the ZigBee instance.
   @param[in] Data_Request Structure pointer containing information for the
                           request.

   @return
     - QAPI_OK if the request executed successfully.
     - A negative value if there was an error.
*/
qapi_Status_t qapi_ZB_ZGP_Data_Request(qapi_ZB_Handle_t ZB_Handle, const qapi_ZB_ZGP_GP_Data_Request_t *Data_Request);

/**
   @brief Implements the ZigBee Green Power key adding.

   @param[in] ZB_Handle   is the handle of the ZigBee instance.
   @param[in] Key_Request Structure pointer containing the key information to
                          add.

   @return
     - QAPI_OK if the request executed successfully.
     - A negative value if there was an error.
*/
qapi_Status_t qapi_ZB_ZGP_Add_Key(qapi_ZB_Handle_t ZB_Handle, const qapi_ZB_ZGP_Key_Request_t *Key_Request);

#endif // ] #ifndef __QAPI_ZB_APSDE_H__

/** @} */
