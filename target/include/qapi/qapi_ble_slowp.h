/*
 * Copyright (c) 2016-2018 Qualcomm Technologies, Inc.
 * All Rights Reserved.
 */
// Copyright (c) 2018 Qualcomm Technologies, Inc.
// All rights reserved.
// Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) 
// provided that the following conditions are met:
// Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
// Redistributions in binary form must reproduce the above copyright notice, 
// this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
// Neither the name of Qualcomm Technologies, Inc. nor the names of its contributors may be used to endorse or promote products derived 
// from this software without specific prior written permission.
// NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
// BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
// IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, 
// OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
// EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/**
 * @file qapi_ble_slowp.h
 *
 * @brief
 * QCA QAPI for Bluetopia Bluetooth Six LOW PAN (SLoWP) API Type
 * Definitions, Constants, and Prototypes.
 *
 * @details
 * The Six LOW PAN programming interface defines the procedures
 * to create and maintain connections to other 6LoWPAN capable
 * Bluetooth devices.
 */

#ifndef __QAPI_BLE_SLOWP_H__
#define __QAPI_BLE_SLOWP_H__

#include "./qapi_ble_btapityp.h"  /* Bluetooth API Type Definitions.          */
#include "./qapi_ble_bttypes.h"   /* Bluetooth Type Definitions/Constants.    */
#include "./qapi_ble_gatt.h"      /* QAPI GATT prototypes.                    */
#include "./qapi_ble_ipsp.h"      /* QAPI IPSP prototypes.                    */

/**
 * @addtogroup qapi_ble_services
 * @{
 */

   /* Error Return Codes.                                               */

   /* Error Codes that are smaller than these (less than -1000) are     */
   /* related to the Bluetooth Protocol Stack itself (see BTERRORS.H).  */
#define QAPI_BLE_SLOWP_ERROR_INVALID_PARAMETER                    (-2000)
/**< Invalid parameter. */
#define QAPI_BLE_SLOWP_ERROR_INVALID_BLUETOOTH_STACK_ID           (-2001)
/**< Invalid Bluetooth Stack ID. */
#define QAPI_BLE_SLOWP_ERROR_INSUFFICIENT_RESOURCES               (-2002)
/**< Insufficient resources. */
#define QAPI_BLE_SLOWP_ERROR_NODE_ALREADY_INITIALIZED             (-2003)
/**< Node role has already been initialized. */
#define QAPI_BLE_SLOWP_ERROR_NODE_NOT_INITIALIZED                 (-2004)
/**< Node role has not been initialized. */
#define QAPI_BLE_SLOWP_ERROR_MALFORMATTED_DATA                    (-2006)
/**< Malformatted data. */
#define QAPI_BLE_SLOWP_ERROR_UNKNOWN_ERROR                        (-2007)
/**< Unknown error. */
#define QAPI_BLE_SLOWP_ERROR_NO_CONNECTION_INFORMATION            (-2008)
/**< No connection information. */
#define QAPI_BLE_SLOWP_ERROR_INVALID_STATE                        (-2009)
/**< Invalid state. */
#define QAPI_BLE_SLOWP_ERROR_INVALID_PACKET                       (-2010)
/**< Invalid packet. */
#define QAPI_BLE_SLOWP_ERROR_NOT_INITIALIZED                      (-2011)
/**< Layer not initialized. */

   /* The following constants represent the Open Status Values that are */
   /* possible in the SLoWP Open Confirmation Event Data Information.   */
#define QAPI_BLE_SLOWP_OPEN_STATUS_SUCCESS                          0x00
/**< Connection was successfully opened. */
#define QAPI_BLE_SLOWP_OPEN_STATUS_CONNECTION_TIMEOUT               0x01
/**< Connection timed out. */
#define QAPI_BLE_SLOWP_OPEN_STATUS_CONNECTION_REFUSED               0x02
/**< Connection was refused. */
#define QAPI_BLE_SLOWP_OPEN_STATUS_UNKNOWN_ERROR                    0x03
/**< Connection failed for an unknown reason. */

/**
 * Enumeration that represents all the events generated by the Six Low PAN
 * (SLoWP) layer. These are used to determine the type of each event generated,
 * and to ensure the proper union element is accessed for the
 * #qapi_BLE_SLoWP_Event_Data_t structure.
 */
typedef enum
{
   QAPI_BLE_ET_SLOWP_OPEN_INDICATION_E,
   /**< Connection indication event. */
   QAPI_BLE_ET_SLOWP_OPEN_REQUEST_INDICATION_E,
   /**< Connection request indication event. */
   QAPI_BLE_ET_SLOWP_OPEN_CONFIRMATION_E,
   /**< Connection confirmation event. */
   QAPI_BLE_ET_SLOWP_CLOSE_INDICATION_E,
   /**< Connection close indication event. */
   QAPI_BLE_ET_SLOWP_CLOSE_CONFIRMATION_E
   /**< Connection close confirmation event. */
} qapi_BLE_SLoWP_Event_Type_t;

/**
 * Structure that represents the data for the
 * QAPI_BLE_ET_SLOWP_OPEN_INDICATION_E and 
 * QAPI_BLE_ET_SLOWP_OPEN_REQUEST_INDICATION_E 
 * events.
 */
typedef struct qapi_BLE_SLoWP_Open_Indication_Info_Data_s
{
   /**
    * Remote device address.
    */
   qapi_BLE_BD_ADDR_t RemoteDevice;

   /**
    * Maximum Service Data Unit (SDU).
    */
   uint16_t           MaxSDUSize;

   /**
    * Maximum Protocol Data Unit (PDU).
    */
   uint16_t           MaxPDUSize;

   /**
    * Initial LE credits for the channel.
    */
   uint16_t           InitialCredits;
} qapi_BLE_SLoWP_Open_Indication_Info_Data_t;

#define QAPI_BLE_SLOWP_OPEN_INDICATION_INFO_DATA_SIZE              (sizeof(qapi_BLE_SLoWP_Open_Indication_Info_Data_t))
/**<
 * Size of the #qapi_BLE_SLoWP_Open_Indication_Info_Data_t structure.
 */

/**
 * Structure that represents the data for the
 * QAPI_BLE_ET_SLOWP_OPEN_CONFIRMATION_E event.
 */
typedef struct qapi_BLE_SLoWP_Open_Confirmation_Data_s
{
   /**
    * Remote device address.
    */
   qapi_BLE_BD_ADDR_t RemoteDevice;

   /**
    * Connection status.
    */
   uint32_t           ConnectionStatus;

   /**
    * Maximum SDU.
    */
   uint16_t           MaxSDUSize;

   /**
    * Maximum PDU.
    */
   uint16_t           MaxPDUSize;

   /**
    * Initial LE credits for the channel.
    */
   uint16_t           InitialCredits;
} qapi_BLE_SLoWP_Open_Confirmation_Data_t;

#define QAPI_BLE_SLOWP_OPEN_CONFIRMATION_DATA_SIZE                  (sizeof(qapi_BLE_SLoWP_Open_Confirmation_Data_t))
/**<
 * Size of the #qapi_BLE_SLoWP_Open_Confirmation_Data_t structure.
 */

/**
 * Structure that represents the data for the
 * QAPI_BLE_ET_SLOWP_CLOSE_INDICATION_E event.
 */
typedef struct qapi_BLE_SLoWP_Close_Indication_Data_s
{
   /**
    * Remote device address.
    */
   qapi_BLE_BD_ADDR_t RemoteDevice;

   /**
    * Reason for the disconnection.
    */
   uint32_t           Reason;
} qapi_BLE_SLoWP_Close_Indication_Data_t;

#define QAPI_BLE_SLOWP_CLOSE_INDICATION_DATA_SIZE                   (sizeof(qapi_BLE_SLoWP_Close_Indication_Data_t))
/**<
 * Size of the #qapi_BLE_SLoWP_Close_Indication_Data_t structure.
 */

/**
 * Structure that represents the data for the
 * QAPI_BLE_ET_SLOWP_CLOSE_CONFIRMATION_E event.
 */
typedef struct qapi_BLE_SLoWP_Close_Confirmation_Data_s
{
   /**
    * Remote device address.
    */
   qapi_BLE_BD_ADDR_t RemoteDevice;
} qapi_BLE_SLoWP_Close_Confirmation_Data_t;

#define QAPI_BLE_SLOWP_CLOSE_CONFIRMATION_DATA_SIZE                 (sizeof(qapi_BLE_SLoWP_Close_Confirmation_Data_t))
/**<
 * Size of the #qapi_BLE_SLoWP_Close_Confirmation_Data_t structure.
 */

/**
 * Structure that represents the container structure for holding all the
 * event data for SLoWP.
 */
typedef struct qapi_BLE_SLoWP_Event_Data_s
{
   /**
    * Event type used to determine the appropriate union member of
    * the Event_Data field to access.
    */
   qapi_BLE_SLoWP_Event_Type_t Event_Data_Type;

   /**
    * Total size of the data contained in the event.
    */
   uint8_t                     Event_Data_Size;
   union
   {
      /**
       * SLoWP Open Indication event data.
       */
      qapi_BLE_SLoWP_Open_Indication_Info_Data_t *SLoWP_Open_Indication_Info_Data;

      /**
       * SLoWP Open Confirmation event data.
       */
      qapi_BLE_SLoWP_Open_Confirmation_Data_t    *SLoWP_Open_Confirmation_Data;

      /**
       * SLoWP Close Indication event data.
       */
      qapi_BLE_SLoWP_Close_Indication_Data_t     *SLoWP_Close_Indication_Data;

      /**
       * SLoWP Close Confirmation event data.
       */
      qapi_BLE_SLoWP_Close_Confirmation_Data_t   *SLoWP_Close_Confirmation_Data;
   }
   /**
    * Event data.
    */
   Event_Data;
} qapi_BLE_SLoWP_Event_Data_t;

#define QAPI_BLE_SLOWP_EVENT_DATA_SIZE                              (sizeof(qapi_BLE_SLoWP_Event_Data_t))
/**<
 * Size of the #qapi_BLE_SLoWP_Event_Data_t structure.
 */

/**
 * @brief
 * This declared type represents the Prototype Function for a
 * SLoWP Event Callback. This function will be called whenever a define
 * SLoWP Event occurs within the Bluetooth Protocol Stack that is
 * specified with the specified Bluetooth Stack ID.
 *
 * @details
 * The event information is passed to the user in the #qapi_BLE_SLoWP_Event_Data_t
 * structure. This structure contains all the information about the
 * event that occurred.
 *
 * The caller should use the contents of the SLoWP Event Data
 * only in the context of this callback. If the caller requires
 * the data for a longer period of time, the callback function
 * must copy the data into another data buffer.
 *
 * This function is guaranteed not to be invoked more than once
 * simultaneously for the specified installed callback (i.e., this
 * function does not have be reentrant). It should be noted, however,
 * that if the same callback is installed more than once, the
 * callbacks will be called serially. Because of this, the processing
 * in this function should be as efficient as possible.
 *
 * It should also be noted that this function is called in the Thread
 * Context of a Thread that the user does not own. Therefore, processing
 * in this function should be as efficient as possible (this argument holds
 * anyway because another SLoWP Event will not be processed while this
 * function call is outstanding).
 *
 * @note1hang
 * This function must not block and wait for events that can only be
 * satisfied by receiving other Bluetooth Stack Events. A Deadlock
 * will occur because other callbacks might not be issued while
 * this function is currently outstanding.
 *
 * @param[in]  BluetoothStackID      Unique identifier assigned to this
 *                                   Bluetooth Protocol Stack on which the
 *                                   event occurred.
 *
 * @param[in]  SLoWP_Event_Data      Pointer to a structure that contains
 *                                   information about the event that has
 *                                   occurred.
 *
 * @param[in]  CallbackParameter     User-defined value that will be
 *                                   received with the SLoWP Event data.
 *
 * @return None.
 */
typedef void (QAPI_BLE_BTPSAPI *qapi_BLE_SLoWP_Event_Callback_t)(uint32_t BluetoothStackID, qapi_BLE_SLoWP_Event_Data_t *SLoWP_Event_Data, uint32_t CallbackParameter);

   /* SLoWP Common Layer Initialization/Cleanup API.                    */

/**
 * @brief
 * Initializes the SLoWP layer.
 *
 * @details
 * This function must be called before any other SLoWP profile function
 * may be called. This function can only be called once per stack
 * instance.
 *
 * @param[in]  BluetoothStackID           Unique identifier assigned to
 *                                        this Bluetooth Protocol Stack
 *                                        via a call to
 *                                        qapi_BLE_BSC_Initialize().
 *
 * @return      Zero if successful.
 *
 * @return      An error code if negative; one of the following values:
 *              @par
 *                 QAPI_BLE_SLOWP_ERROR_INSUFFICIENT_RESOURCES \n
 *                 QAPI_BLE_SLOWP_ERROR_NODE_ALREADY_INITIALIZED \n
 *                 QAPI_BLE_SLOWP_ERROR_INVALID_PARAMETER \n
 *                 QAPI_BLE_SLOWP_ERROR_INVALID_BLUETOOTH_STACK_ID
 */
QAPI_BLE_DECLARATION int QAPI_BLE_BTPSAPI qapi_BLE_SLoWP_Initialize(uint32_t BluetoothStackID);

/**
 * @brief
 * Cleans up a previously initialized SLOWP instance.
 *
 * @details
 * After calling this function, qapi_BLE_SLoWP_Initialize() must
 * be called for the SLoWP using the specified Bluetooth stack
 * again before any other SLoWP function can be called.
 *
 * @param[in]  BluetoothStackID    Unique identifier assigned to this
 *                                 Bluetooth Protocol Stack via a
 *                                 call to qapi_BLE_BSC_Initialize().
 *
 * @return      Zero if successful.
 *
 * @return      An error code if negative; one of the following values:
 *              @par
 *                 QAPI_BLE_SLOWP_ERROR_INSUFFICIENT_RESOURCES \n
 *                 QAPI_BLE_SLOWP_ERROR_NOT_INITIALIZED \n
 *                 QAPI_BLE_SLoWP_ERROR_INVALID_BLUETOOTH_STACK_ID \n
 *                 QAPI_BLE_SLoWP_ERROR_INVALID_PARAMETER
 */
QAPI_BLE_DECLARATION int QAPI_BLE_BTPSAPI qapi_BLE_SLoWP_Cleanup(uint32_t BluetoothStackID);

   /* SLoWP Node API.                                                   */

/**
 * @brief
 * Intitializesg an SLoWP Node (will wait
 * for an SLoWP connection to be established by a remote SLoWP router).
 * This function will also register the Internet Protocol Support Service
 * (IPSS) that is required for an SLoWP Node.
 *
 * @details
 * This function allows the application to select a handle range in GATT
 * to store the service.
 *
 * Only one IPSS server may be open at a time, per the Bluetooth Stack ID.
 *
 * Since IPSS only has one attribute (the Primary Service Declaration),
 * we will not include an API to query the attributes like other services
 * since there is only one.
 *
 * @param[in]  BluetoothStackID     Unique identifier assigned to this
 *                                  Bluetooth Protocol Stack via a
 *                                  call to qapi_BLE_BSC_Initialize().
 *
 * @param[in]  ChannelParameters    SLoWP Node's LE Channel Parameters
 *                                  that will be used to configure the
 *                                  SLoWP connection when an SLoWP
 *                                  connection request is received from
 *                                  an SLoWP Router.
 * 
 * @param[in]  QueueingParameters   Queueing parameters to use over
 *                                  L2CAP for any incoming node
 *                                  connections.
 *
 * @param[in]  EventCallback        SLoWP Event Callback that will
 *                                  receive SLoWP connection events.
 *
 * @param[in]  CallbackParameter    User-defined value that will be
 *                                  received with the specified
 *                                  EventCallback parameter.
 *
 * @param[in,out]  ServiceHandleRange    Pointer that, on input, holds
 *                                       the handle range to store the
 *                                       IPSS service in GATT, and on
 *                                       output, contains the handle
 *                                       range for where the service is
 *                                       stored in GATT.
 *
 * @return      Zero if successful.
 *
 * @return      An error code if negative; one of the following values:
 *              @par
 *                 QAPI_BLE_SLOWP_ERROR_INSUFFICIENT_RESOURCES \n
 *                 QAPI_BLE_SLOWP_ERROR_INVALID_PARAMETER \n
 *                 QAPI_BLE_SLOWP_ERROR_NODE_ALREADY_INITIALIZED \n
 *                 QAPI_BLE_BTGATT_ERROR_INVALID_SERVICE_TABLE_FORMAT \n
 *                 QAPI_BLE_BTGATT_ERROR_INSUFFICIENT_RESOURCES \n
 *                 QAPI_BLE_BTGATT_ERROR_INVALID_PARAMETER \n
 *                 QAPI_BLE_BTGATT_ERROR_INVALID_BLUETOOTH_STACK_ID \n
 *                 QAPI_BLE_BTGATT_ERROR_NOT_INITIALIZED
 */
QAPI_BLE_DECLARATION int QAPI_BLE_BTPSAPI qapi_BLE_SLoWP_Initialize_Node(uint32_t BluetoothStackID, qapi_BLE_L2CA_LE_Channel_Parameters_t *ChannelParameters, qapi_BLE_L2CA_Queueing_Parameters_t *QueueingParameters, qapi_BLE_SLoWP_Event_Callback_t EventCallback, uint32_t CallbackParameter, qapi_BLE_GATT_Attribute_Handle_Group_t *ServiceHandleRange);

/**
 * @brief
 * Cleans up and frees all resources
 * associated with an SLoWP Node that was initialized via the
 * qapi_BLE_SLoWP_Initialize_Node_Role() function.
 *
 * @param[in]  BluetoothStackID    Unique identifier assigned to this
 *                                 Bluetooth Protocol Stack via a
 *                                 call to qapi_BLE_BSC_Initialize().
 *
 * @return      Zero if successful.
 *
 * @return      An error code if negative; one of the following values:
 *              @par
 *                 QAPI_BLE_SLOWP_ERROR_INVALID_PARAMETER
 */
QAPI_BLE_DECLARATION int QAPI_BLE_BTPSAPI qapi_BLE_SLoWP_Cleanup_Node(uint32_t BluetoothStackID);

/**
 * @brief
 * Responds to connection requests
 * received from an SLoWP router if the SLoWP Node's connection mode
 * is set to QAPI_BLE_CM_MANUAL_ACCEPT_E. Otherwise, the connection
 * request will automatically be accepted or rejected.
 *
 * @param[in]  BluetoothStackID    Unique identifier assigned to this
 *                                 Bluetooth Protocol Stack via a
 *                                 call to qapi_BLE_BSC_Initialize().
 *
 * @param[in]  BD_ADDR             Bluetooth address of
 *                                 the remote device.
 *
 * @param[in]  AcceptConnection    Boolean value that is used to
 *                                 accept or reject the connection.
 *
 * @return     Zero if successful.
 *
 * @return     An error code if negative; one of the following
 *             values:
 *             @par
 *                 QAPI_BLE_SLOWP_ERROR_INVALID_PARAMETER \n
 *                 QAPI_BLE_SLOWP_ERROR_CONNECTION_NOT_PENDING
 */
QAPI_BLE_DECLARATION int QAPI_BLE_BTPSAPI qapi_BLE_SLoWP_Open_Connection_Request_Response(uint32_t BluetoothStackID, qapi_BLE_BD_ADDR_t BD_ADDR, boolean_t AcceptConnection);

/**
 * @brief
 * Getts the connection mode of
 * the SLoWP Node.
 *
 * @param[in]  BluetoothStackID    Unique identifier assigned to this
 *                                 Bluetooth Protocol Stack via a
 *                                 call to qapi_BLE_BSC_Initialize().
 *
 * @param[out]  ConnectionMode     Pointer that, on ouput, will hold
 *                                 the connection mode for the SLoWP
 *                                 Node if this function is
 *                                 successful.
 *
 * @return      Zero if successful.
 *
 * @return      An error code if negative; one of the following values:
 *              @par
 *                 QAPI_BLE_SLOWP_ERROR_INVALID_PARAMETER
 */
QAPI_BLE_DECLARATION int QAPI_BLE_BTPSAPI qapi_BLE_SLoWP_Get_Node_Connection_Mode(uint32_t BluetoothStackID, qapi_BLE_IPSP_Node_Connection_Mode_t *ConnectionMode);

/**
 * @brief
 * Sets the connection mode of
 * the SLoWP Node.
 *
 * @param[in]  BluetoothStackID    Unique identifier assigned to this
 *                                 Bluetooth Protocol Stack via a
 *                                 call to qapi_BLE_BSC_Initialize().
 *
 * @param[in]  ConnectionMode      Enumeration for the connection
 *                                 mode that will be set for the SLoWP
 *                                 Node if this function is
 *                                 successful.
 *
 * @return      Zero if successful.
 *
 * @return      An error code if negative; one of the following values:
 *              @par
 *                 QAPI_BLE_SLOWP_ERROR_INVALID_PARAMETER
 */
QAPI_BLE_DECLARATION int QAPI_BLE_BTPSAPI qapi_BLE_SLoWP_Set_Node_Connection_Mode(uint32_t BluetoothStackID, qapi_BLE_IPSP_Node_Connection_Mode_t ConnectionMode);

   /* SLoWP Router API.                                                 */

/**
 * @brief
 * Sends a connection request from
 * an SLoWP Router to an SLoWP Node.
 *
 * @details
 * Once a connection is opened to an SLoWP Node, it can only be closed
 * via a call to the qapi_BLE_SLoWP_Close_Connection() function.
 *
 * A positive return value does not mean that a SLoWP connection
 * already exists, only that the SLoWP connection request has been
 * successfully submitted.
 *
 * The ACL connection to the remote device must already exist before
 * calling this function
 *
 * @param[in]  BluetoothStackID    Unique identifier assigned to this
 *                                 Bluetooth Protocol Stack via a
 *                                 call to qapi_BLE_BSC_Initialize().
 *
 * @param[in]  BD_ADDR             Bluetooth Address of the SLoWP
 *                                 Node.
 *
 * @param[in]  ChannelParameters    SLoWP Router's LE Channel
 *                                  Parameters that will be used to
 *                                  configure the SLoWP connection
 *                                  when an SLoWP connection request
 *                                  is sent to the SLoWP Node.
 *
 * @param[in]  QueueingParameters   Queueing parameters to use over
 *                                  L2CAP for connection.
 *
 * @param[in]  EventCallback        SLoWP Event Callback that will
 *                                  receive SLoWP Connection events.
 *
 * @param[in]  CallbackParameter    User-defined value that will be
 *                                  received with the specified
 *                                  EventCallback parameter.
 *
 * @return      Zero if successful.
 *
 * @return      An error code if negative; one of the following values:
 *              @par
 *                 QAPI_BLE_SLOWP_ERROR_INVALID_PARAMETER \n
 *                 QAPI_BLE_SLOWP_ERROR_INSUFFICIENT_RESOURCES
 */
QAPI_BLE_DECLARATION int QAPI_BLE_BTPSAPI qapi_BLE_SLoWP_Connect_Remote_Node(uint32_t BluetoothStackID, qapi_BLE_BD_ADDR_t BD_ADDR, qapi_BLE_L2CA_LE_Channel_Parameters_t *ChannelParameters, qapi_BLE_L2CA_Queueing_Parameters_t *QueueingParameters, qapi_BLE_SLoWP_Event_Callback_t EventCallback, uint32_t CallbackParameter);

   /* SLoWP Common Role API.                                            */

/**
 * @brief
 * Closes an SLoWP connection to a
 * remote device. This function may be called by an SLoWP Node or SLoWP
 * Router.
 *
 * @details
 * If this function completes successfully, an SLoWP Close
 * Indication (QAPI_BLE_ET_SLOWP_CLOSE_INDICATION_E) event will be
 * sent to the SLoWP Callback Function that was handling the SLoWP
 * Events for this connection.
 *
 * @param[in] BluetoothStackID    Unique identifier assigned to this
 *                                Bluetooth Protocol Stack via a
 *                                call to qapi_BLE_BSC_Initialize().
 *
 * @param[in] BD_ADDR              Bluetooth address of
 *                                 the remote device for the SLoWP
 *                                 connection to be closed.
 *
 * @return      Zero if successful.
 *
 * @return      An error code if negative; one of the following values:
 *              @par
 *                 QAPI_BLE_SLOWP_ERROR_INVALID_PARAMETER \n
 *                 QAPI_BLE_SLOWP_ERROR_NO_CONNECTION_INFORMATION
 */
QAPI_BLE_DECLARATION int QAPI_BLE_BTPSAPI qapi_BLE_SLoWP_Close_Connection(uint32_t BluetoothStackID, qapi_BLE_BD_ADDR_t BD_ADDR);

/**
 * @brief
 * Sets the queuing parameters for a SLoWP connection.
 *
 * @details
 * These parameters are used to control aspects of the amount of data
 * packets that can be queued into the lower level (per individual
 * device connection).
 *
 * @param[in] BluetoothStackID    Unique identifier assigned
 *                                to this Bluetooth Protocol
 *                                Stack via a call to
 *                                qapi_BLE_BSC_Initialize().
 *
 * @param[in] BD_ADDR             Bluetooth address of
 *                                the remote device for the SLoWP
 *                                connection.
 *
 * @param[in] QueueingParameters  Queueing parameters to use
 *                                over L2CAP for connection.
 *
 * @return     Zero if successful.
 *
 * @return     An error code if negative; one of the following values:
 *             @par
 *                  QAPI_BLE_SLOWP_ERROR_INVALID_PARAMETER \n
 *                  QAPI_BLE_SLOWP_ERROR_NO_CONNECTION_INFORMATION
 */
QAPI_BLE_DECLARATION int QAPI_BLE_BTPSAPI qapi_BLE_SLoWP_Set_Queueing_Parameters(uint32_t BluetoothStackID, qapi_BLE_BD_ADDR_t BD_ADDR, qapi_BLE_L2CA_Queueing_Parameters_t *QueueingParameters);

/**
 *  @}
 */

#endif
